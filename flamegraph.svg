<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>[advent-of-code] (14 samples, 0.12%)</title><rect x="0.1673%" y="789" width="0.1171%" height="15" fill="rgb(227,0,7)"/><text x="0.4173%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (228 samples, 1.91%)</title><rect x="0.3095%" y="773" width="1.9072%" height="15" fill="rgb(217,0,24)"/><text x="0.5595%" y="783.50">&lt;..</text></g><g><title>advent_of_code::day15::play_until (94 samples, 0.79%)</title><rect x="2.3588%" y="773" width="0.7863%" height="15" fill="rgb(221,193,54)"/><text x="2.6088%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 0.33%)</title><rect x="4.4249%" y="757" width="0.3262%" height="15" fill="rgb(248,212,6)"/><text x="4.6749%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (39 samples, 0.33%)</title><rect x="4.4249%" y="741" width="0.3262%" height="15" fill="rgb(208,68,35)"/><text x="4.6749%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (39 samples, 0.33%)</title><rect x="4.4249%" y="725" width="0.3262%" height="15" fill="rgb(232,128,0)"/><text x="4.6749%" y="735.50"></text></g><g><title>core::hash::Hasher::write_u32 (39 samples, 0.33%)</title><rect x="4.4249%" y="709" width="0.3262%" height="15" fill="rgb(207,160,47)"/><text x="4.6749%" y="719.50"></text></g><g><title>[unknown] (619 samples, 5.18%)</title><rect x="0.2844%" y="789" width="5.1777%" height="15" fill="rgb(228,23,34)"/><text x="0.5344%" y="799.50">[unkno..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (275 samples, 2.30%)</title><rect x="3.1619%" y="773" width="2.3003%" height="15" fill="rgb(218,30,26)"/><text x="3.4119%" y="783.50">s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (85 samples, 0.71%)</title><rect x="4.7512%" y="757" width="0.7110%" height="15" fill="rgb(220,122,19)"/><text x="5.0012%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.18%)</title><rect x="6.2401%" y="69" width="0.1757%" height="15" fill="rgb(250,228,42)"/><text x="6.4901%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 0.69%)</title><rect x="6.0728%" y="181" width="0.6859%" height="15" fill="rgb(240,193,28)"/><text x="6.3228%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (82 samples, 0.69%)</title><rect x="6.0728%" y="165" width="0.6859%" height="15" fill="rgb(216,20,37)"/><text x="6.3228%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (81 samples, 0.68%)</title><rect x="6.0811%" y="149" width="0.6775%" height="15" fill="rgb(206,188,39)"/><text x="6.3311%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (81 samples, 0.68%)</title><rect x="6.0811%" y="133" width="0.6775%" height="15" fill="rgb(217,207,13)"/><text x="6.3311%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (81 samples, 0.68%)</title><rect x="6.0811%" y="117" width="0.6775%" height="15" fill="rgb(231,73,38)"/><text x="6.3311%" y="127.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (71 samples, 0.59%)</title><rect x="6.1648%" y="101" width="0.5939%" height="15" fill="rgb(225,20,46)"/><text x="6.4148%" y="111.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats::{{closure}} (63 samples, 0.53%)</title><rect x="6.2317%" y="85" width="0.5270%" height="15" fill="rgb(210,31,41)"/><text x="6.4817%" y="95.50"></text></g><g><title>advent_of_code::day11::Area::get_seat_in_direction (41 samples, 0.34%)</title><rect x="6.4157%" y="69" width="0.3430%" height="15" fill="rgb(221,200,47)"/><text x="6.6657%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (15 samples, 0.13%)</title><rect x="6.7587%" y="181" width="0.1255%" height="15" fill="rgb(226,26,5)"/><text x="7.0087%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.13%)</title><rect x="6.7587%" y="165" width="0.1255%" height="15" fill="rgb(249,33,26)"/><text x="7.0087%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (15 samples, 0.13%)</title><rect x="6.7587%" y="149" width="0.1255%" height="15" fill="rgb(235,183,28)"/><text x="7.0087%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.13%)</title><rect x="6.7587%" y="133" width="0.1255%" height="15" fill="rgb(221,5,38)"/><text x="7.0087%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.12%)</title><rect x="6.7670%" y="117" width="0.1171%" height="15" fill="rgb(247,18,42)"/><text x="7.0170%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (14 samples, 0.12%)</title><rect x="6.7670%" y="101" width="0.1171%" height="15" fill="rgb(241,131,45)"/><text x="7.0170%" y="111.50"></text></g><g><title>alloc::alloc::realloc (13 samples, 0.11%)</title><rect x="6.7754%" y="85" width="0.1087%" height="15" fill="rgb(249,31,29)"/><text x="7.0254%" y="95.50"></text></g><g><title>__rdl_realloc (13 samples, 0.11%)</title><rect x="6.7754%" y="69" width="0.1087%" height="15" fill="rgb(225,111,53)"/><text x="7.0254%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.11%)</title><rect x="6.7754%" y="53" width="0.1087%" height="15" fill="rgb(238,160,17)"/><text x="7.0254%" y="63.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.11%)</title><rect x="6.7754%" y="37" width="0.1087%" height="15" fill="rgb(214,148,48)"/><text x="7.0254%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (119 samples, 1.00%)</title><rect x="5.9222%" y="213" width="0.9954%" height="15" fill="rgb(232,36,49)"/><text x="6.1722%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (113 samples, 0.95%)</title><rect x="5.9724%" y="197" width="0.9452%" height="15" fill="rgb(209,103,24)"/><text x="6.2224%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (133 samples, 1.11%)</title><rect x="5.8971%" y="325" width="1.1125%" height="15" fill="rgb(229,88,8)"/><text x="6.1471%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (133 samples, 1.11%)</title><rect x="5.8971%" y="309" width="1.1125%" height="15" fill="rgb(213,181,19)"/><text x="6.1471%" y="319.50"></text></g><g><title>core::iter::adapters::process_results (133 samples, 1.11%)</title><rect x="5.8971%" y="293" width="1.1125%" height="15" fill="rgb(254,191,54)"/><text x="6.1471%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (133 samples, 1.11%)</title><rect x="5.8971%" y="277" width="1.1125%" height="15" fill="rgb(241,83,37)"/><text x="6.1471%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (133 samples, 1.11%)</title><rect x="5.8971%" y="261" width="1.1125%" height="15" fill="rgb(233,36,39)"/><text x="6.1471%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (133 samples, 1.11%)</title><rect x="5.8971%" y="245" width="1.1125%" height="15" fill="rgb(226,3,54)"/><text x="6.1471%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (131 samples, 1.10%)</title><rect x="5.9138%" y="229" width="1.0958%" height="15" fill="rgb(245,192,40)"/><text x="6.1638%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33 samples, 0.28%)</title><rect x="7.0180%" y="261" width="0.2760%" height="15" fill="rgb(238,167,29)"/><text x="7.2680%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (28 samples, 0.23%)</title><rect x="7.0598%" y="245" width="0.2342%" height="15" fill="rgb(232,182,51)"/><text x="7.3098%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (54 samples, 0.45%)</title><rect x="7.0096%" y="277" width="0.4517%" height="15" fill="rgb(231,60,39)"/><text x="7.2596%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (215 samples, 1.80%)</title><rect x="5.6880%" y="405" width="1.7984%" height="15" fill="rgb(208,69,12)"/><text x="5.9380%" y="415.50">&lt;..</text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (213 samples, 1.78%)</title><rect x="5.7047%" y="389" width="1.7817%" height="15" fill="rgb(235,93,37)"/><text x="5.9547%" y="399.50">c..</text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (212 samples, 1.77%)</title><rect x="5.7131%" y="373" width="1.7733%" height="15" fill="rgb(213,116,39)"/><text x="5.9631%" y="383.50">c..</text></g><g><title>advent_of_code::day11::Area::step2::{{closure}} (201 samples, 1.68%)</title><rect x="5.8051%" y="357" width="1.6813%" height="15" fill="rgb(222,207,29)"/><text x="6.0551%" y="367.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_cardinal_seats (198 samples, 1.66%)</title><rect x="5.8302%" y="341" width="1.6562%" height="15" fill="rgb(206,96,30)"/><text x="6.0802%" y="351.50"></text></g><g><title>itertools::Itertools::collect_vec (57 samples, 0.48%)</title><rect x="7.0096%" y="325" width="0.4768%" height="15" fill="rgb(218,138,4)"/><text x="7.2596%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (57 samples, 0.48%)</title><rect x="7.0096%" y="309" width="0.4768%" height="15" fill="rgb(250,191,14)"/><text x="7.2596%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (57 samples, 0.48%)</title><rect x="7.0096%" y="293" width="0.4768%" height="15" fill="rgb(239,60,40)"/><text x="7.2596%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (217 samples, 1.82%)</title><rect x="5.6880%" y="517" width="1.8151%" height="15" fill="rgb(206,27,48)"/><text x="5.9380%" y="527.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (217 samples, 1.82%)</title><rect x="5.6880%" y="501" width="1.8151%" height="15" fill="rgb(225,35,8)"/><text x="5.9380%" y="511.50">c..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (217 samples, 1.82%)</title><rect x="5.6880%" y="485" width="1.8151%" height="15" fill="rgb(250,213,24)"/><text x="5.9380%" y="495.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (217 samples, 1.82%)</title><rect x="5.6880%" y="469" width="1.8151%" height="15" fill="rgb(247,123,22)"/><text x="5.9380%" y="479.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (217 samples, 1.82%)</title><rect x="5.6880%" y="453" width="1.8151%" height="15" fill="rgb(231,138,38)"/><text x="5.9380%" y="463.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (217 samples, 1.82%)</title><rect x="5.6880%" y="437" width="1.8151%" height="15" fill="rgb(231,145,46)"/><text x="5.9380%" y="447.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (217 samples, 1.82%)</title><rect x="5.6880%" y="421" width="1.8151%" height="15" fill="rgb(251,118,11)"/><text x="5.9380%" y="431.50">c..</text></g><g><title>&lt;advent_of_code::day11::day11_part2::RunnerStruct as aoc_runner::Runner&gt;::try_run (223 samples, 1.87%)</title><rect x="5.6462%" y="709" width="1.8653%" height="15" fill="rgb(217,147,25)"/><text x="5.8962%" y="719.50">&lt;..</text></g><g><title>advent_of_code::day11::part2 (223 samples, 1.87%)</title><rect x="5.6462%" y="693" width="1.8653%" height="15" fill="rgb(247,81,37)"/><text x="5.8962%" y="703.50">a..</text></g><g><title>advent_of_code::day11::Area::step2 (222 samples, 1.86%)</title><rect x="5.6545%" y="677" width="1.8570%" height="15" fill="rgb(209,12,38)"/><text x="5.9045%" y="687.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (222 samples, 1.86%)</title><rect x="5.6545%" y="661" width="1.8570%" height="15" fill="rgb(227,1,9)"/><text x="5.9045%" y="671.50">c..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (222 samples, 1.86%)</title><rect x="5.6545%" y="645" width="1.8570%" height="15" fill="rgb(248,47,43)"/><text x="5.9045%" y="655.50">&lt;..</text></g><g><title>core::iter::adapters::process_results (222 samples, 1.86%)</title><rect x="5.6545%" y="629" width="1.8570%" height="15" fill="rgb(221,10,30)"/><text x="5.9045%" y="639.50">c..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (222 samples, 1.86%)</title><rect x="5.6545%" y="613" width="1.8570%" height="15" fill="rgb(210,229,1)"/><text x="5.9045%" y="623.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (222 samples, 1.86%)</title><rect x="5.6545%" y="597" width="1.8570%" height="15" fill="rgb(222,148,37)"/><text x="5.9045%" y="607.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (222 samples, 1.86%)</title><rect x="5.6545%" y="581" width="1.8570%" height="15" fill="rgb(234,67,33)"/><text x="5.9045%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (222 samples, 1.86%)</title><rect x="5.6545%" y="565" width="1.8570%" height="15" fill="rgb(247,98,35)"/><text x="5.9045%" y="575.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (222 samples, 1.86%)</title><rect x="5.6545%" y="549" width="1.8570%" height="15" fill="rgb(247,138,52)"/><text x="5.9045%" y="559.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (220 samples, 1.84%)</title><rect x="5.6713%" y="533" width="1.8402%" height="15" fill="rgb(213,79,30)"/><text x="5.9213%" y="543.50">a..</text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (31 samples, 0.26%)</title><rect x="7.6621%" y="405" width="0.2593%" height="15" fill="rgb(246,177,23)"/><text x="7.9121%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (31 samples, 0.26%)</title><rect x="7.6621%" y="389" width="0.2593%" height="15" fill="rgb(230,62,27)"/><text x="7.9121%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (31 samples, 0.26%)</title><rect x="7.6621%" y="373" width="0.2593%" height="15" fill="rgb(216,154,8)"/><text x="7.9121%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.26%)</title><rect x="7.6621%" y="357" width="0.2593%" height="15" fill="rgb(244,35,45)"/><text x="7.9121%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (31 samples, 0.26%)</title><rect x="7.6621%" y="341" width="0.2593%" height="15" fill="rgb(251,115,12)"/><text x="7.9121%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (32 samples, 0.27%)</title><rect x="8.1054%" y="293" width="0.2677%" height="15" fill="rgb(240,54,50)"/><text x="8.3554%" y="303.50"></text></g><g><title>alloc::alloc::realloc (30 samples, 0.25%)</title><rect x="8.1221%" y="277" width="0.2509%" height="15" fill="rgb(233,84,52)"/><text x="8.3721%" y="287.50"></text></g><g><title>__rdl_realloc (30 samples, 0.25%)</title><rect x="8.1221%" y="261" width="0.2509%" height="15" fill="rgb(207,117,47)"/><text x="8.3721%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (30 samples, 0.25%)</title><rect x="8.1221%" y="245" width="0.2509%" height="15" fill="rgb(249,43,39)"/><text x="8.3721%" y="255.50"></text></g><g><title>__GI___libc_realloc (30 samples, 0.25%)</title><rect x="8.1221%" y="229" width="0.2509%" height="15" fill="rgb(209,38,44)"/><text x="8.3721%" y="239.50"></text></g><g><title>_int_realloc (19 samples, 0.16%)</title><rect x="8.2141%" y="213" width="0.1589%" height="15" fill="rgb(236,212,23)"/><text x="8.4641%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.28%)</title><rect x="8.1054%" y="309" width="0.2760%" height="15" fill="rgb(242,79,21)"/><text x="8.3554%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (45 samples, 0.38%)</title><rect x="8.0217%" y="373" width="0.3764%" height="15" fill="rgb(211,96,35)"/><text x="8.2717%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45 samples, 0.38%)</title><rect x="8.0217%" y="357" width="0.3764%" height="15" fill="rgb(253,215,40)"/><text x="8.2717%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (45 samples, 0.38%)</title><rect x="8.0217%" y="341" width="0.3764%" height="15" fill="rgb(211,81,21)"/><text x="8.2717%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 0.38%)</title><rect x="8.0217%" y="325" width="0.3764%" height="15" fill="rgb(208,190,38)"/><text x="8.2717%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (49 samples, 0.41%)</title><rect x="8.0134%" y="389" width="0.4099%" height="15" fill="rgb(235,213,38)"/><text x="8.2634%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (20 samples, 0.17%)</title><rect x="8.4400%" y="389" width="0.1673%" height="15" fill="rgb(237,122,38)"/><text x="8.6900%" y="399.50"></text></g><g><title>advent_of_code::day11::Area::get_neighbors (89 samples, 0.74%)</title><rect x="7.9214%" y="405" width="0.7445%" height="15" fill="rgb(244,218,35)"/><text x="8.1714%" y="415.50"></text></g><g><title>&lt;advent_of_code::day11::day11_part1::RunnerStruct as aoc_runner::Runner&gt;::run (138 samples, 1.15%)</title><rect x="7.5533%" y="693" width="1.1543%" height="15" fill="rgb(240,68,47)"/><text x="7.8033%" y="703.50"></text></g><g><title>advent_of_code::day11::part1 (138 samples, 1.15%)</title><rect x="7.5533%" y="677" width="1.1543%" height="15" fill="rgb(210,16,53)"/><text x="7.8033%" y="687.50"></text></g><g><title>advent_of_code::day11::Area::step (138 samples, 1.15%)</title><rect x="7.5533%" y="661" width="1.1543%" height="15" fill="rgb(235,124,12)"/><text x="7.8033%" y="671.50"></text></g><g><title>itertools::Itertools::collect_vec (138 samples, 1.15%)</title><rect x="7.5533%" y="645" width="1.1543%" height="15" fill="rgb(224,169,11)"/><text x="7.8033%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (138 samples, 1.15%)</title><rect x="7.5533%" y="629" width="1.1543%" height="15" fill="rgb(250,166,2)"/><text x="7.8033%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (138 samples, 1.15%)</title><rect x="7.5533%" y="613" width="1.1543%" height="15" fill="rgb(242,216,29)"/><text x="7.8033%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (138 samples, 1.15%)</title><rect x="7.5533%" y="597" width="1.1543%" height="15" fill="rgb(230,116,27)"/><text x="7.8033%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (138 samples, 1.15%)</title><rect x="7.5533%" y="581" width="1.1543%" height="15" fill="rgb(228,99,48)"/><text x="7.8033%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (138 samples, 1.15%)</title><rect x="7.5533%" y="565" width="1.1543%" height="15" fill="rgb(253,11,6)"/><text x="7.8033%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 1.15%)</title><rect x="7.5533%" y="549" width="1.1543%" height="15" fill="rgb(247,143,39)"/><text x="7.8033%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 1.15%)</title><rect x="7.5533%" y="533" width="1.1543%" height="15" fill="rgb(236,97,10)"/><text x="7.8033%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (138 samples, 1.15%)</title><rect x="7.5533%" y="517" width="1.1543%" height="15" fill="rgb(233,208,19)"/><text x="7.8033%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (137 samples, 1.15%)</title><rect x="7.5617%" y="501" width="1.1460%" height="15" fill="rgb(216,164,2)"/><text x="7.8117%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (137 samples, 1.15%)</title><rect x="7.5617%" y="485" width="1.1460%" height="15" fill="rgb(220,129,5)"/><text x="7.8117%" y="495.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (137 samples, 1.15%)</title><rect x="7.5617%" y="469" width="1.1460%" height="15" fill="rgb(242,17,10)"/><text x="7.8117%" y="479.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (136 samples, 1.14%)</title><rect x="7.5701%" y="453" width="1.1376%" height="15" fill="rgb(242,107,0)"/><text x="7.8201%" y="463.50"></text></g><g><title>advent_of_code::day11::Area::step::{{closure}} (125 samples, 1.05%)</title><rect x="7.6621%" y="437" width="1.0456%" height="15" fill="rgb(251,28,31)"/><text x="7.9121%" y="447.50"></text></g><g><title>advent_of_code::day11::Area::get_occ_neighbors (125 samples, 1.05%)</title><rect x="7.6621%" y="421" width="1.0456%" height="15" fill="rgb(233,223,10)"/><text x="7.9121%" y="431.50"></text></g><g><title>advent_of_code::day15::play_until (53 samples, 0.44%)</title><rect x="10.6483%" y="597" width="0.4433%" height="15" fill="rgb(215,21,27)"/><text x="10.8983%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (89 samples, 0.74%)</title><rect x="12.1623%" y="517" width="0.7445%" height="15" fill="rgb(232,23,21)"/><text x="12.4123%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (179 samples, 1.50%)</title><rect x="11.7775%" y="533" width="1.4973%" height="15" fill="rgb(244,5,23)"/><text x="12.0275%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (44 samples, 0.37%)</title><rect x="12.9067%" y="517" width="0.3680%" height="15" fill="rgb(226,81,46)"/><text x="13.1567%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (138 samples, 1.15%)</title><rect x="13.9523%" y="517" width="1.1543%" height="15" fill="rgb(247,70,30)"/><text x="14.2023%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (594 samples, 4.97%)</title><rect x="11.0916%" y="581" width="4.9686%" height="15" fill="rgb(212,68,19)"/><text x="11.3416%" y="591.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (594 samples, 4.97%)</title><rect x="11.0916%" y="565" width="4.9686%" height="15" fill="rgb(240,187,13)"/><text x="11.3416%" y="575.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (594 samples, 4.97%)</title><rect x="11.0916%" y="549" width="4.9686%" height="15" fill="rgb(223,113,26)"/><text x="11.3416%" y="559.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (333 samples, 2.79%)</title><rect x="13.2748%" y="533" width="2.7854%" height="15" fill="rgb(206,192,2)"/><text x="13.5248%" y="543.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (114 samples, 0.95%)</title><rect x="15.1066%" y="517" width="0.9536%" height="15" fill="rgb(241,108,4)"/><text x="15.3566%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (77 samples, 0.64%)</title><rect x="16.0602%" y="581" width="0.6441%" height="15" fill="rgb(247,173,49)"/><text x="16.3102%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (55 samples, 0.46%)</title><rect x="18.0092%" y="501" width="0.4601%" height="15" fill="rgb(224,114,35)"/><text x="18.2592%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (72 samples, 0.60%)</title><rect x="19.1552%" y="485" width="0.6023%" height="15" fill="rgb(245,159,27)"/><text x="19.4052%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (1,049 samples, 8.77%)</title><rect x="11.0916%" y="597" width="8.7746%" height="15" fill="rgb(245,172,44)"/><text x="11.3416%" y="607.50">hashbrown::m..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (378 samples, 3.16%)</title><rect x="16.7043%" y="581" width="3.1619%" height="15" fill="rgb(236,23,11)"/><text x="16.9543%" y="591.50">cor..</text></g><g><title>core::hash::Hasher::write_u32 (378 samples, 3.16%)</title><rect x="16.7043%" y="565" width="3.1619%" height="15" fill="rgb(205,117,38)"/><text x="16.9543%" y="575.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (300 samples, 2.51%)</title><rect x="17.3568%" y="549" width="2.5094%" height="15" fill="rgb(237,72,25)"/><text x="17.6068%" y="559.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (300 samples, 2.51%)</title><rect x="17.3568%" y="533" width="2.5094%" height="15" fill="rgb(244,70,9)"/><text x="17.6068%" y="543.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (300 samples, 2.51%)</title><rect x="17.3568%" y="517" width="2.5094%" height="15" fill="rgb(217,125,39)"/><text x="17.6068%" y="527.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (167 samples, 1.40%)</title><rect x="18.4693%" y="501" width="1.3969%" height="15" fill="rgb(235,36,10)"/><text x="18.7193%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.11%)</title><rect x="19.7574%" y="485" width="0.1087%" height="15" fill="rgb(251,123,47)"/><text x="20.0074%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.19%)</title><rect x="20.2844%" y="581" width="0.1924%" height="15" fill="rgb(221,13,13)"/><text x="20.5344%" y="591.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (75 samples, 0.63%)</title><rect x="20.4768%" y="565" width="0.6274%" height="15" fill="rgb(238,131,9)"/><text x="20.7268%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (54 samples, 0.45%)</title><rect x="20.6524%" y="549" width="0.4517%" height="15" fill="rgb(211,50,8)"/><text x="20.9024%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.72%)</title><rect x="20.4768%" y="581" width="0.7194%" height="15" fill="rgb(245,182,24)"/><text x="20.7268%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (3,300 samples, 27.60%)</title><rect x="21.2463%" y="581" width="27.6035%" height="15" fill="rgb(242,14,37)"/><text x="21.4963%" y="591.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_valu..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (3,300 samples, 27.60%)</title><rect x="21.2463%" y="565" width="27.6035%" height="15" fill="rgb(246,228,12)"/><text x="21.4963%" y="575.50">core::cmp::impls::&lt;impl core::cmp::PartialEq..</text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (24 samples, 0.20%)</title><rect x="48.8582%" y="581" width="0.2008%" height="15" fill="rgb(213,55,15)"/><text x="49.1082%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2,133 samples, 17.84%)</title><rect x="49.0590%" y="581" width="17.8419%" height="15" fill="rgb(209,9,3)"/><text x="49.3090%" y="591.50">hashbrown::raw::sse2::Group:..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2,133 samples, 17.84%)</title><rect x="49.0590%" y="565" width="17.8419%" height="15" fill="rgb(230,59,30)"/><text x="49.3090%" y="575.50">core::core_arch::x86::sse2::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,133 samples, 17.84%)</title><rect x="49.0590%" y="549" width="17.8419%" height="15" fill="rgb(209,121,21)"/><text x="49.3090%" y="559.50">core::intrinsics::copy_nonov..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (100 samples, 0.84%)</title><rect x="66.9009%" y="565" width="0.8365%" height="15" fill="rgb(220,109,13)"/><text x="67.1509%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (138 samples, 1.15%)</title><rect x="66.9009%" y="581" width="1.1543%" height="15" fill="rgb(232,18,1)"/><text x="67.1509%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (38 samples, 0.32%)</title><rect x="67.7373%" y="565" width="0.3179%" height="15" fill="rgb(215,41,42)"/><text x="67.9873%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (38 samples, 0.32%)</title><rect x="67.7373%" y="549" width="0.3179%" height="15" fill="rgb(224,123,36)"/><text x="67.9873%" y="559.50"></text></g><g><title>advent_of_code::day15::play_until (38 samples, 0.32%)</title><rect x="67.7373%" y="533" width="0.3179%" height="15" fill="rgb(240,125,3)"/><text x="67.9873%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,991 samples, 58.48%)</title><rect x="10.1715%" y="645" width="58.4776%" height="15" fill="rgb(205,98,50)"/><text x="10.4215%" y="655.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (6,991 samples, 58.48%)</title><rect x="10.1715%" y="629" width="58.4776%" height="15" fill="rgb(205,185,37)"/><text x="10.4215%" y="639.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (6,991 samples, 58.48%)</title><rect x="10.1715%" y="613" width="58.4776%" height="15" fill="rgb(238,207,15)"/><text x="10.4215%" y="623.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (5,832 samples, 48.78%)</title><rect x="19.8662%" y="597" width="48.7829%" height="15" fill="rgb(213,199,42)"/><text x="20.1162%" y="607.50">hashbrown::raw::RawTable&lt;T&gt;::find</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (71 samples, 0.59%)</title><rect x="68.0552%" y="581" width="0.5939%" height="15" fill="rgb(235,201,11)"/><text x="68.3052%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (71 samples, 0.59%)</title><rect x="68.0552%" y="565" width="0.5939%" height="15" fill="rgb(207,46,11)"/><text x="68.3052%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (71 samples, 0.59%)</title><rect x="68.0552%" y="549" width="0.5939%" height="15" fill="rgb(241,35,35)"/><text x="68.3052%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (144 samples, 1.20%)</title><rect x="72.1037%" y="533" width="1.2045%" height="15" fill="rgb(243,32,47)"/><text x="72.3537%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (94 samples, 0.79%)</title><rect x="73.3082%" y="533" width="0.7863%" height="15" fill="rgb(247,202,23)"/><text x="73.5582%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (429 samples, 3.59%)</title><rect x="71.2422%" y="549" width="3.5885%" height="15" fill="rgb(219,102,11)"/><text x="71.4922%" y="559.50">&lt;cor..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (88 samples, 0.74%)</title><rect x="74.0945%" y="533" width="0.7361%" height="15" fill="rgb(243,110,44)"/><text x="74.3445%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (147 samples, 1.23%)</title><rect x="75.8009%" y="533" width="1.2296%" height="15" fill="rgb(222,74,54)"/><text x="76.0509%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1,151 samples, 9.63%)</title><rect x="69.3350%" y="597" width="9.6278%" height="15" fill="rgb(216,99,12)"/><text x="69.5850%" y="607.50">&lt;std::collecti..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,151 samples, 9.63%)</title><rect x="69.3350%" y="581" width="9.6278%" height="15" fill="rgb(226,22,26)"/><text x="69.5850%" y="591.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,151 samples, 9.63%)</title><rect x="69.3350%" y="565" width="9.6278%" height="15" fill="rgb(217,163,10)"/><text x="69.5850%" y="575.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (494 samples, 4.13%)</title><rect x="74.8306%" y="549" width="4.1322%" height="15" fill="rgb(213,25,53)"/><text x="75.0806%" y="559.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (231 samples, 1.93%)</title><rect x="77.0305%" y="533" width="1.9322%" height="15" fill="rgb(252,105,26)"/><text x="77.2805%" y="543.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (21 samples, 0.18%)</title><rect x="79.8745%" y="549" width="0.1757%" height="15" fill="rgb(220,39,43)"/><text x="80.1245%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (166 samples, 1.39%)</title><rect x="78.9628%" y="597" width="1.3885%" height="15" fill="rgb(229,68,48)"/><text x="79.2128%" y="607.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (57 samples, 0.48%)</title><rect x="79.8745%" y="581" width="0.4768%" height="15" fill="rgb(252,8,32)"/><text x="80.1245%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (57 samples, 0.48%)</title><rect x="79.8745%" y="565" width="0.4768%" height="15" fill="rgb(223,20,43)"/><text x="80.1245%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (36 samples, 0.30%)</title><rect x="80.0502%" y="549" width="0.3011%" height="15" fill="rgb(229,81,49)"/><text x="80.3002%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (141 samples, 1.18%)</title><rect x="83.8729%" y="517" width="1.1794%" height="15" fill="rgb(236,28,36)"/><text x="84.1229%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (198 samples, 1.66%)</title><rect x="86.8005%" y="501" width="1.6562%" height="15" fill="rgb(249,185,26)"/><text x="87.0505%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (2,291 samples, 19.16%)</title><rect x="69.3350%" y="613" width="19.1635%" height="15" fill="rgb(249,174,33)"/><text x="69.5850%" y="623.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (974 samples, 8.15%)</title><rect x="80.3513%" y="597" width="8.1472%" height="15" fill="rgb(233,201,37)"/><text x="80.6013%" y="607.50">core::hash:..</text></g><g><title>core::hash::Hasher::write_u32 (974 samples, 8.15%)</title><rect x="80.3513%" y="581" width="8.1472%" height="15" fill="rgb(221,78,26)"/><text x="80.6013%" y="591.50">core::hash:..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (807 samples, 6.75%)</title><rect x="81.7482%" y="565" width="6.7503%" height="15" fill="rgb(250,127,30)"/><text x="81.9982%" y="575.50">&lt;std::col..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (807 samples, 6.75%)</title><rect x="81.7482%" y="549" width="6.7503%" height="15" fill="rgb(230,49,44)"/><text x="81.9982%" y="559.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (807 samples, 6.75%)</title><rect x="81.7482%" y="533" width="6.7503%" height="15" fill="rgb(229,67,23)"/><text x="81.9982%" y="543.50">&lt;core::ha..</text></g><g><title>core::hash::sip::u8to64_le (412 samples, 3.45%)</title><rect x="85.0523%" y="517" width="3.4463%" height="15" fill="rgb(249,83,47)"/><text x="85.3023%" y="527.50">cor..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (38 samples, 0.32%)</title><rect x="88.7495%" y="581" width="0.3179%" height="15" fill="rgb(215,43,3)"/><text x="88.9995%" y="591.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (28 samples, 0.23%)</title><rect x="88.8331%" y="565" width="0.2342%" height="15" fill="rgb(238,154,13)"/><text x="89.0831%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.35%)</title><rect x="88.7495%" y="597" width="0.3513%" height="15" fill="rgb(219,56,2)"/><text x="88.9995%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (32 samples, 0.27%)</title><rect x="89.1008%" y="597" width="0.2677%" height="15" fill="rgb(233,0,4)"/><text x="89.3508%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (32 samples, 0.27%)</title><rect x="89.1008%" y="581" width="0.2677%" height="15" fill="rgb(235,30,7)"/><text x="89.3508%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (19 samples, 0.16%)</title><rect x="89.3685%" y="597" width="0.1589%" height="15" fill="rgb(250,79,13)"/><text x="89.6185%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (23 samples, 0.19%)</title><rect x="89.6194%" y="597" width="0.1924%" height="15" fill="rgb(211,146,34)"/><text x="89.8694%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (23 samples, 0.19%)</title><rect x="89.6194%" y="581" width="0.1924%" height="15" fill="rgb(228,22,38)"/><text x="89.8694%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.19%)</title><rect x="89.6194%" y="565" width="0.1924%" height="15" fill="rgb(235,168,5)"/><text x="89.8694%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (34 samples, 0.28%)</title><rect x="89.8118%" y="597" width="0.2844%" height="15" fill="rgb(221,155,16)"/><text x="90.0618%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (26 samples, 0.22%)</title><rect x="89.8787%" y="581" width="0.2175%" height="15" fill="rgb(215,215,53)"/><text x="90.1287%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (26 samples, 0.22%)</title><rect x="89.8787%" y="565" width="0.2175%" height="15" fill="rgb(223,4,10)"/><text x="90.1287%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (26 samples, 0.22%)</title><rect x="89.8787%" y="549" width="0.2175%" height="15" fill="rgb(234,103,6)"/><text x="90.1287%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (203 samples, 1.70%)</title><rect x="88.4985%" y="613" width="1.6980%" height="15" fill="rgb(227,97,0)"/><text x="88.7485%" y="623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (12 samples, 0.10%)</title><rect x="90.0962%" y="597" width="0.1004%" height="15" fill="rgb(234,150,53)"/><text x="90.3462%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (12 samples, 0.10%)</title><rect x="90.3304%" y="597" width="0.1004%" height="15" fill="rgb(228,201,54)"/><text x="90.5804%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (12 samples, 0.10%)</title><rect x="90.3304%" y="581" width="0.1004%" height="15" fill="rgb(222,22,37)"/><text x="90.5804%" y="591.50"></text></g><g><title>core::ptr::write (12 samples, 0.10%)</title><rect x="90.3304%" y="565" width="0.1004%" height="15" fill="rgb(237,53,32)"/><text x="90.5804%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (13 samples, 0.11%)</title><rect x="90.6315%" y="581" width="0.1087%" height="15" fill="rgb(233,25,53)"/><text x="90.8815%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.11%)</title><rect x="90.6315%" y="565" width="0.1087%" height="15" fill="rgb(210,40,34)"/><text x="90.8815%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.11%)</title><rect x="90.6315%" y="549" width="0.1087%" height="15" fill="rgb(241,220,44)"/><text x="90.8815%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (40 samples, 0.33%)</title><rect x="90.4308%" y="597" width="0.3346%" height="15" fill="rgb(235,28,35)"/><text x="90.6808%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.12%)</title><rect x="90.8072%" y="549" width="0.1171%" height="15" fill="rgb(210,56,17)"/><text x="91.0572%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.12%)</title><rect x="90.8072%" y="533" width="0.1171%" height="15" fill="rgb(224,130,29)"/><text x="91.0572%" y="543.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (13 samples, 0.11%)</title><rect x="90.8156%" y="517" width="0.1087%" height="15" fill="rgb(235,212,8)"/><text x="91.0656%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.18%)</title><rect x="91.0749%" y="469" width="0.1757%" height="15" fill="rgb(223,33,50)"/><text x="91.3249%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17 samples, 0.14%)</title><rect x="91.3927%" y="453" width="0.1422%" height="15" fill="rgb(219,149,13)"/><text x="91.6427%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (83 samples, 0.69%)</title><rect x="90.9745%" y="517" width="0.6943%" height="15" fill="rgb(250,156,29)"/><text x="91.2245%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (83 samples, 0.69%)</title><rect x="90.9745%" y="501" width="0.6943%" height="15" fill="rgb(216,193,19)"/><text x="91.2245%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (83 samples, 0.69%)</title><rect x="90.9745%" y="485" width="0.6943%" height="15" fill="rgb(216,135,14)"/><text x="91.2245%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (50 samples, 0.42%)</title><rect x="91.2505%" y="469" width="0.4182%" height="15" fill="rgb(241,47,5)"/><text x="91.5005%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16 samples, 0.13%)</title><rect x="91.5349%" y="453" width="0.1338%" height="15" fill="rgb(233,42,35)"/><text x="91.7849%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (19 samples, 0.16%)</title><rect x="91.6688%" y="517" width="0.1589%" height="15" fill="rgb(231,13,6)"/><text x="91.9188%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (171 samples, 1.43%)</title><rect x="90.9243%" y="549" width="1.4304%" height="15" fill="rgb(207,181,40)"/><text x="91.1743%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (165 samples, 1.38%)</title><rect x="90.9745%" y="533" width="1.3802%" height="15" fill="rgb(254,173,49)"/><text x="91.2245%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (63 samples, 0.53%)</title><rect x="91.8277%" y="517" width="0.5270%" height="15" fill="rgb(221,1,38)"/><text x="92.0777%" y="527.50"></text></g><g><title>core::hash::Hasher::write_u32 (63 samples, 0.53%)</title><rect x="91.8277%" y="501" width="0.5270%" height="15" fill="rgb(206,124,46)"/><text x="92.0777%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.43%)</title><rect x="91.9281%" y="485" width="0.4266%" height="15" fill="rgb(249,21,11)"/><text x="92.1781%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (51 samples, 0.43%)</title><rect x="91.9281%" y="469" width="0.4266%" height="15" fill="rgb(222,201,40)"/><text x="92.1781%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (51 samples, 0.43%)</title><rect x="91.9281%" y="453" width="0.4266%" height="15" fill="rgb(235,61,29)"/><text x="92.1781%" y="463.50"></text></g><g><title>core::hash::sip::u8to64_le (27 samples, 0.23%)</title><rect x="92.1288%" y="437" width="0.2258%" height="15" fill="rgb(219,207,3)"/><text x="92.3788%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (121 samples, 1.01%)</title><rect x="92.3547%" y="549" width="1.0121%" height="15" fill="rgb(222,56,46)"/><text x="92.6047%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (121 samples, 1.01%)</title><rect x="92.3547%" y="533" width="1.0121%" height="15" fill="rgb(239,76,54)"/><text x="92.6047%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 1.01%)</title><rect x="92.3547%" y="517" width="1.0121%" height="15" fill="rgb(231,124,27)"/><text x="92.6047%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (16 samples, 0.13%)</title><rect x="93.3668%" y="549" width="0.1338%" height="15" fill="rgb(249,195,6)"/><text x="93.6168%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (26 samples, 0.22%)</title><rect x="93.6094%" y="533" width="0.2175%" height="15" fill="rgb(237,174,47)"/><text x="93.8594%" y="543.50"></text></g><g><title>core::intrinsics::write_bytes (26 samples, 0.22%)</title><rect x="93.6094%" y="517" width="0.2175%" height="15" fill="rgb(206,201,31)"/><text x="93.8594%" y="527.50"></text></g><g><title>__memset_erms (26 samples, 0.22%)</title><rect x="93.6094%" y="501" width="0.2175%" height="15" fill="rgb(231,57,52)"/><text x="93.8594%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (367 samples, 3.07%)</title><rect x="90.7654%" y="597" width="3.0698%" height="15" fill="rgb(248,177,22)"/><text x="91.0154%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (366 samples, 3.06%)</title><rect x="90.7737%" y="581" width="3.0615%" height="15" fill="rgb(215,211,37)"/><text x="91.0237%" y="591.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (366 samples, 3.06%)</title><rect x="90.7737%" y="565" width="3.0615%" height="15" fill="rgb(241,128,51)"/><text x="91.0237%" y="575.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (27 samples, 0.23%)</title><rect x="93.6094%" y="549" width="0.2258%" height="15" fill="rgb(227,165,31)"/><text x="93.8594%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (453 samples, 3.79%)</title><rect x="90.1966%" y="613" width="3.7892%" height="15" fill="rgb(228,167,24)"/><text x="90.4466%" y="623.50">hash..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3,088 samples, 25.83%)</title><rect x="68.6491%" y="645" width="25.8302%" height="15" fill="rgb(228,143,12)"/><text x="68.8991%" y="655.50">std::collections::hash::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (3,079 samples, 25.75%)</title><rect x="68.7244%" y="629" width="25.7549%" height="15" fill="rgb(249,149,8)"/><text x="68.9744%" y="639.50">hashbrown::map::HashMap&lt;K,V,S&gt;::insert</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (59 samples, 0.49%)</title><rect x="93.9858%" y="613" width="0.4935%" height="15" fill="rgb(243,35,44)"/><text x="94.2358%" y="623.50"></text></g><g><title>&lt;advent_of_code::day15::day15_part2_default::RunnerStruct as aoc_runner::Runner&gt;::run (10,267 samples, 85.88%)</title><rect x="8.7077%" y="693" width="85.8804%" height="15" fill="rgb(246,89,9)"/><text x="8.9577%" y="703.50">&lt;advent_of_code::day15::day15_part2_default::RunnerStruct as aoc_runner::Runner&gt;::run</text></g><g><title>advent_of_code::day15::part2 (10,267 samples, 85.88%)</title><rect x="8.7077%" y="677" width="85.8804%" height="15" fill="rgb(233,213,13)"/><text x="8.9577%" y="687.50">advent_of_code::day15::part2</text></g><g><title>advent_of_code::day15::play_until (10,267 samples, 85.88%)</title><rect x="8.7077%" y="661" width="85.8804%" height="15" fill="rgb(233,141,41)"/><text x="8.9577%" y="671.50">advent_of_code::day15::play_until</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (13 samples, 0.11%)</title><rect x="94.4793%" y="645" width="0.1087%" height="15" fill="rgb(239,167,4)"/><text x="94.7293%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (13 samples, 0.11%)</title><rect x="94.4793%" y="629" width="0.1087%" height="15" fill="rgb(209,217,16)"/><text x="94.7293%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (13 samples, 0.11%)</title><rect x="94.4793%" y="613" width="0.1087%" height="15" fill="rgb(219,88,35)"/><text x="94.7293%" y="623.50"></text></g><g><title>&lt;advent_of_code::day25::day25_part1::RunnerStruct as aoc_runner::Runner&gt;::run (26 samples, 0.22%)</title><rect x="94.5880%" y="661" width="0.2175%" height="15" fill="rgb(220,193,23)"/><text x="94.8380%" y="671.50"></text></g><g><title>advent_of_code::day25::transform (378 samples, 3.16%)</title><rect x="94.8055%" y="661" width="3.1619%" height="15" fill="rgb(230,90,52)"/><text x="95.0555%" y="671.50">adv..</text></g><g><title>aoc_runner::Runner::try_run (11,037 samples, 92.32%)</title><rect x="7.5450%" y="709" width="92.3212%" height="15" fill="rgb(252,106,19)"/><text x="7.7950%" y="719.50">aoc_runner::Runner::try_run</text></g><g><title>&lt;advent_of_code::day25::day25_part1::RunnerStruct as aoc_runner::Runner&gt;::run (631 samples, 5.28%)</title><rect x="94.5880%" y="693" width="5.2781%" height="15" fill="rgb(206,74,20)"/><text x="94.8380%" y="703.50">&lt;adven..</text></g><g><title>advent_of_code::day25::part1 (631 samples, 5.28%)</title><rect x="94.5880%" y="677" width="5.2781%" height="15" fill="rgb(230,138,44)"/><text x="94.8380%" y="687.50">advent..</text></g><g><title>advent_of_code::day25::transform_until (227 samples, 1.90%)</title><rect x="97.9674%" y="661" width="1.8988%" height="15" fill="rgb(235,182,43)"/><text x="98.2174%" y="671.50">a..</text></g><g><title>__libc_start_main (11,268 samples, 94.25%)</title><rect x="5.6294%" y="773" width="94.2535%" height="15" fill="rgb(242,16,51)"/><text x="5.8794%" y="783.50">__libc_start_main</text></g><g><title>main (11,268 samples, 94.25%)</title><rect x="5.6294%" y="757" width="94.2535%" height="15" fill="rgb(248,9,4)"/><text x="5.8794%" y="767.50">main</text></g><g><title>std::rt::lang_start::{{closure}} (11,266 samples, 94.24%)</title><rect x="5.6462%" y="741" width="94.2367%" height="15" fill="rgb(210,31,22)"/><text x="5.8962%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>advent_of_code::main (11,266 samples, 94.24%)</title><rect x="5.6462%" y="725" width="94.2367%" height="15" fill="rgb(239,54,39)"/><text x="5.8962%" y="735.50">advent_of_code::main</text></g><g><title>_start (11,294 samples, 94.47%)</title><rect x="5.5207%" y="789" width="94.4709%" height="15" fill="rgb(230,99,41)"/><text x="5.7707%" y="799.50">_start</text></g><g><title>_dl_start (13 samples, 0.11%)</title><rect x="99.8829%" y="773" width="0.1087%" height="15" fill="rgb(253,106,12)"/><text x="100.1329%" y="783.50"></text></g><g><title>all (11,955 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(213,46,41)"/><text x="0.2500%" y="831.50"></text></g><g><title>advent-of-code (11,955 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(215,133,35)"/><text x="0.2500%" y="815.50">advent-of-code</text></g></svg></svg>